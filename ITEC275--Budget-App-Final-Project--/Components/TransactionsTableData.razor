@inject DataManager DataManager

<table class="table">
    <thead>
        <tr class="table-primary">
            <th scope="col" class="text-center"><h5>Transaction Date</h5></th>
            <th scope="col" class="text-center"><h5>Payee</h5></th>
            <th scope="col" class="text-center"><h5>Category</h5></th>
            <th scope="col" class="text-center"><h5>Outflow</h5></th>
            <th scope="col" class="text-center"><h5>Inflow</h5></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in DataManager.BudgetAccountsTransactionsDictionary![DataManager.CurrentBudget!][_Account!])
        {
            <tr>
                <td class="text-center align-content-center">
                    <button class="btn btn-sm btn-danger float-sm-start align-self-center" @onclick="() => DeleteTransaction(transaction)">X</button>
                    <div class="m-1">@transaction.TransactionDate</div>
                </td>
                <td class="text-center fw-normal align-content-center">@transaction.Payee</td>
                @if (transaction.CategoryId != null)
                {
                    bool foundCategory = false;

                    foreach (var categoryList in DataManager.BudgetSectionCategoriesDictionary![DataManager.CurrentBudget!].Values)
                    {
                        foreach (Category cat in categoryList)
                        {
                            if (cat.CategoryId == transaction.CategoryId)
                            {
                                <td class="text-center fw-normal align-content-center">@categoryList.FirstOrDefault(x => x.CategoryId == transaction.CategoryId)!.CategoryName</td>
                                foundCategory = true;
                                break;
                            }
                        }
                    }
                    if (!foundCategory)
                    {
                        <td class="text-center fw-normal align-content-center">No Category</td>
                    }
                }
                else
                {
                    <td class="text-center fw-normal align-content-center">No Category</td>
                }

                @if (transaction.IsCredit)
                {
                    <td class="text-center fw-normal"></td>
                    <td class="text-center fw-normal text-success align-content-center">@String.Format("{0:0.00}", transaction.TransactionValue)</td> @*Make these editable.*@
                }
                else
                {
                    <td class="text-center fw-normal text-danger align-content-center">@String.Format("{0:0.00}", transaction.TransactionValue)</td>
                    <td class="text-center fw-normal"></td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public Account? _Account { get; set; }

    [Parameter]
    public EventCallback ParentStateRefresh { get; set; }

    protected override void OnInitialized()
    {
        //Orders transactions
        DataManager.BudgetAccountsTransactionsDictionary![DataManager.CurrentBudget!][_Account!] = DataManager.BudgetAccountsTransactionsDictionary![DataManager.CurrentBudget!][_Account!].OrderByDescending(x => x.TransactionDate).ToList();
    }

    private void DeleteTransaction(Transaction Transaction)
    {
        using (var context = new ApplicationDbContext())
        {
            context.Transactions.Remove(Transaction);

            DataManager.BudgetAccountsTransactionsDictionary![DataManager.CurrentBudget!][_Account!].Remove(Transaction);

            context.SaveChanges();
        }

        ParentStateRefresh.InvokeAsync();
    }
}
