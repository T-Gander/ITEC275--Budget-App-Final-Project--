@inject DataManager DataManager
@inject NavigationManager NavigationManager

@foreach (var Section in DataManager.BudgetSectionCategoriesDictionary![DataManager.CurrentBudget!])
{
    <table class="table table-bordered">
        <tbody>
            <tr>
                <th>
                    <div class="row mb-1 align-content-center justify-content-between">
                        <h4 class="col-md-6 m-0 align-content-center ms-1">@Section.Key.SectionName, Total Assigned Budget: $@Section.Value.Sum(x => x.AssignedBudget)</h4>
                        <div class="col-md-6 row justify-content-end">
                            <button class="btn btn-primary col-md-1 m-1 ms-3" style="width: 100px;" @onclick="() => AddCategoryToggle(Section.Key)">Add</button>
                            <button class="btn btn-danger col-md-1 m-1 me-3" style="width: 100px;" @onclick="() => DeleteSection(Section.Key)">Delete</button>
                        </div>
                        
                    </div>
                    <div class="row">
                        <Collapse @ref=DataManager.SectionCollapseDictionary![Section.Key] OnHiding="UpdateState">
                            <Card class="col-md-9">
                                <CardBody>
                                    <NewCategory CollapseObj="DataManager.SectionCollapseDictionary![Section.Key]" _Section="Section.Key" RefreshParentState="RefreshParentState"/>
                                </CardBody>
                            </Card>
                        </Collapse>
                    </div>

                    <CategoriesTableData _Section="Section.Key" RefreshParentState="RefreshParentState" />
                </th>
            </tr>
        </tbody>
    </table>

}
  
@code {
    [Parameter]
    public EventCallback RefreshParentState { get; set; }

    private void AddCategoryToggle(Section section)
    {
        using(var context = new ApplicationDbContext())
        {
            //Section foundSection = context.Sections.Include(x => x.Budget).FirstOrDefault(x => x.SectionId == section.SectionId)!;        
            //bool containsSection = SectionCollapseDictionary.ContainsKey(foundSection);   <-- It's wild that this comes back false. Took a long time to debug, must be something to do with memory.

            Section foundSection = DataManager.SectionCollapseDictionary!.Keys.FirstOrDefault(x => x.SectionId == section.SectionId)!;
            bool test = DataManager.SectionCollapseDictionary.ContainsKey(foundSection);
            DataManager.SectionCollapseDictionary[foundSection!].ToggleAsync();
        }
    }

    private void DeleteSection(Section section)
    {
        using (var context = new ApplicationDbContext())
        {
            foreach (Category cat in context.Categories.Where(x => x.SectionId == section.SectionId))
            {
                Category catDel = DataManager.CategoryCollapseDictionary!.Keys.FirstOrDefault(x => x.CategoryId == cat.CategoryId)!;
                DataManager.CategoryCollapseDictionary!.Remove(catDel);
            }

            context.Categories.RemoveRange(context.Categories.Where(x => x.SectionId == section.SectionId));

            DataManager.BudgetSectionCategoriesDictionary![DataManager.CurrentBudget!].Remove(section);

            Section secDel = DataManager.SectionCollapseDictionary!.Keys.FirstOrDefault(x => x.SectionId == section.SectionId)!;
            DataManager.SectionCollapseDictionary!.Remove(secDel);

            context.Sections.Remove(section);

            context.SaveChanges();
        }
        RefreshParentState.InvokeAsync();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);  //Couldn't figure out weird JS issues
    }

    private void UpdateState()
    {
        DataManager.OrderLists();
        StateHasChanged();
        RefreshParentState.InvokeAsync();
    }
}
