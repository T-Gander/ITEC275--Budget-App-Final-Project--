@page "/Budgets/{BudgetId:int}/Accounts/"

@inject NavigationManager NavigationManager
@inject DataManager DataManager

<h3>My Accounts for Budget: @_CurrentBudget!.BudgetName</h3>

<button class="btn btn-primary mb-2" @onclick="async () => await _AddAccountCollapse.ToggleAsync()">Add an Account</button>
<div class="row mb-6">
    <Collapse @ref=_AddAccountCollapse>
        <Card class="col-md-6">
            <CardBody >
                <NewAccount CollapseObj=_AddAccountCollapse _Budget="_CurrentBudget"/>
            </CardBody>
        </Card>
    </Collapse>
</div>

<div class="row">
    @foreach (var account in DataManager.BudgetAccountsTransactionsDictionary![_CurrentBudget].Keys)
    {
        <div class="col-md-4">
            <table class="table table-bordered">
                <tbody>
                    <tr>
                        <th>
                            <div class="row mb-1 align-content-center justify-content-between">
                                <h4 class="col-md-6 m-0 align-content-center ms-1">@account.AccountName</h4>
                            </div>
                            <div class="row">
                                <h5>
                                    Current Balance: $@DataManager.BudgetAccountsTransactionsDictionary![_CurrentBudget][account].Sum(x =>
                                {
                                    if (!x.IsCredit)
                                    {
                                        return x.TransactionValue * -1;
                                    }
                                    else
                                    {
                                        return x.TransactionValue;
                                    }
                                })
                                </h5>
                            </div>
                            <button class="btn btn-primary" @onclick="() => NavigateToTransactions(account.AccountId)">View Transactions</button>
                            <button class="btn btn-danger" @onclick="() => DeleteAccount(account.AccountId)">Delete</button>
                        </th>
                    </tr>
                </tbody>
            </table>
        </div>
    }
</div>



@code {
    [Parameter]
    public Dictionary<Budget, Dictionary<Account, List<Transaction>>>? AllAccounts { get; set; }

    [Parameter]
    public int AccountId { get; set; }

    [Parameter]
    public int BudgetId { get; set; }

    public Budget? _CurrentBudget;

    private Collapse _AddAccountCollapse = default!;

    protected override void OnInitialized()
    {
        _CurrentBudget = DataManager.BudgetAccountsTransactionsDictionary!.FirstOrDefault(x => x.Key.BudgetId == BudgetId).Key;
        DataManager.CurrentBudget = _CurrentBudget;
    }

    private void NavigateToTransactions(int _accountId)
    {
        NavigationManager.NavigateTo($"./Budgets/{_CurrentBudget.BudgetId}/Accounts/{_accountId}/Transactions");
    }

    private void DeleteAccount(int _accountId)
    {
        using(var context = new ApplicationDbContext())
        {
            Account accountToRemove = context.Accounts.FirstOrDefault(x => x.AccountId == _accountId)!;
            context.Accounts.Remove(accountToRemove);
            context.Transactions.RemoveRange(context.Transactions.Where(x => x.AccountId == accountToRemove.AccountId));
            context.SaveChanges();
        }

        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
