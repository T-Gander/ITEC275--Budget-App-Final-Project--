@page "/Budgets/{_BudgetId:int}"

@inject Popups Popups;

<h1>Budget Name: @_Budget.BudgetName.</h1>
<h2>Total Assets: 
    $@_Transactions.Sum(x => 
        {
            if(!x.IsCredit) 
            {
                return x.TransactionValue * -1;
            }
            else
            {
                return x.TransactionValue;
            }
        }
    )</h2>

<h2>Unassigned Assets: 
    $@(_Transactions.Sum(x =>
       {
           if (!x.IsCredit)
           {
               return x.TransactionValue * -1;
           }
           else
           {
               return x.TransactionValue;
           }
       }
    ) - _Sections.Sum(x => x.Value.Sum(y => y.AssignedBudget)))</h2>

<button class="btn btn-primary mb-2" @onclick="async () => await _AddSectionCollapse.ToggleAsync()">Add a Section</button>
<div class="row mb-4">
    <Collapse @ref=_AddSectionCollapse >
        <Card class="col-md-4">
            <CardBody >
                <NewSection CollapseObj=_AddSectionCollapse _BudgetId="_BudgetId" />
            </CardBody>
        </Card>
    </Collapse>
</div>

<table class="table table-bordered">
    <tbody>
        @foreach (var Section in _Sections)
        {
            <tr>
                <th>
                    <h4>@Section.Key.SectionName, Total Assigned Budget: $@Section.Value.Sum(x => x.AssignedBudget)</h4>
                    <button class="btn btn-primary mb-2" @onclick="async () => await _SectionCategoryCollapseDictionary[Section.Key].ToggleAsync()">Add a Category</button>
                    <div class="row">
                        <Collapse @ref=_SectionCategoryCollapseDictionary[Section.Key]>
                            <Card class="col-md-4">
                                <CardBody>
                                    <NewCategory CollapseObj="_SectionCategoryCollapseDictionary[Section.Key]" _Section="Section.Key" />
                                </CardBody>
                            </Card>
                        </Collapse>
                    </div>

                    <table class="table">
                        <thead>
                            <tr class="table-dark">
                                <th scope="col" class="text-center"><h5>Category Name</h5></th>
                                <th scope="col" class="text-center"><h5>Budget Assigned</h5></th>
                                <th scope="col" class="text-center"><h5>Amount Left to Transact</h5></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Section.Value)
                            {
                                <tr>
                                    <td class="text-center">@category.CategoryName</td>
                                    <td class="text-center fw-normal justify-content-center align-items-center flex-column">
                                        <div class="row justify-content-center">
                                            <label class="col-md-3 align-self-center">Assigned: $@category.AssignedBudget</label>
                                            <button class="btn btn-primary col-md-2" @onclick="async () => await _CategoryCollapseDictionary[category].ToggleAsync()">Assign</button>
                                        </div>
                                        <div class="row justify-content-center">
                                            <Collapse class="col-md-5" @ref="_CategoryCollapseDictionary[category]">
                                                <Card>
                                                    <CardBody>
                                                        <AssignBudget CollapseObj="_CategoryCollapseDictionary[category]" _Section="Section.Key" _CurrentCategory="category"/>
                                                    </CardBody>
                                                </Card>
                                            </Collapse>
                                        </div>
                                    </td>
                                    <td class="text-center fw-normal"></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </th>
            </tr>
        }
    </tbody>
</table>




@code {
    private Dictionary<Section, Collapse> _SectionCategoryCollapseDictionary = new Dictionary<Section, Collapse>();

    private Dictionary<Category, Collapse> _CategoryCollapseDictionary = new Dictionary<Category, Collapse>();

    [Parameter]
    public int _BudgetId { get; set; }

    public List<Account> _Accounts;

    //private Collapse collapse1 = default!;

    public List<Transaction> _Transactions;

    private Collapse _AddSectionCollapse = default!;

    private Budget _Budget;

    private Dictionary<Section, List<Category>> _Sections = new();

    private decimal _UnassignedAssets = 0;

    protected override async Task OnInitializedAsync()
    {
        using(var context = new ApplicationDbContext())
        {
            _Budget = context.Budgets.FirstOrDefault(x => x.BudgetId == _BudgetId);

            _Accounts = context.Accounts.Where(x => x.BudgetId == _Budget.BudgetId).ToList();

            var accountIds = _Accounts.Select(a => a.AccountId).ToList();       //ChatGPT suggested, as EF cannot convert a collection to sql (which is what I was trying to do before with a complex LINQ query)
            _Transactions = context.Transactions
                .Where(x => accountIds.Contains(x.AccountId))
                .ToList();

            //_UnassignedAssets = (_Accounts.Sum(x => x.TotalAssets) - _Sections.Sum(x => x.Value.Sum(y => y.AssignedBudget)));

            List<Section> _BudgetSections = context.Sections.Where(x => x.BudgetId == _Budget.BudgetId).ToList();

            foreach(Section section in _BudgetSections)
            {
                List<Category> connectedCategories = context.Categories.Where(x => x.Section == section).ToList();

                _Sections.Add(section, connectedCategories);
            }

            foreach(var Section in _Sections)
            {
                Collapse newCollapse = default!;
                _SectionCategoryCollapseDictionary.Add(Section.Key, newCollapse);

                foreach (var category in Section.Value)
                {
                    Collapse newCollapse2 = default!;
                    _CategoryCollapseDictionary.Add(category, newCollapse2);
                }
            }
        }
    }
}
